#Installing Depandencies
#+++++++++++++++++++++


sudo dpkg -i /root/k8-offline/general/*
sleep 5s 


#Installing helm
#+++++++++++++++++++++++++

cd /root/k8-offline/helm
cd /root/k8-offline/helm

tar xvf helm-v3.9.3-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin
helm version
sleep 5s 

#Installing CRI - ContainerD & Nerdctl
#++++++++++++++++++++++++++++++++++


cd /root/k8-offline/cri

#Choice 2: (Install nerdctl with all dependencies including containerd and build)
#=================================================================================

tar Cxzvvf /usr/local nerdctl-full-1.7.5-linux-amd64.tar.gz

sudo systemctl enable --now containerd
sudo systemctl enable --now buildkit

sudo mkdir -p /etc/containerd/
containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

sudo systemctl restart containerd

#echo "Press any key to continue..."
#read -s -n 1

sleep 10s # Waits 5 seconds.



#Applying system Configs for Kubernetes
#++++++++++++++++++++++++++++++++++++++


sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter


# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF



# Apply sysctl params without reboot
sudo sysctl --system

sleep 5


#Installing Kubernetes binaries
#++++++++++++++++++++++++++++

cd /root/k8-offline/dependency-k8
cd /root/k8-offline/dependency-k8


dpkg -i /root/k8-offline/dependency-k8/*
sleep 5s 

cd /root/k8-offline/k8
cd /root/k8-offline/k8
sleep 5s

dpkg -i /root/k8-offline/k8/*
sleep 5s

sudo systemctl enable --now kubelet
sleep 10s


#Loading Kubernetes images
#++++++++++++++++++++++++++




cd /root/k8-offline/images
cd /root/k8-offline/images

image_array=($(ls -all |awk {'print $9'}))
image_array_length=${#image_array[@]}
total_images=$((image_array_length-2))
echo $total_images " images are there"


for ((i=2; i<$image_array_length; i++));
do 
nerdctl load -i ${image_array[i]} --namespace=k8s.io
echo "${image_array[i]} has been loaded and image no. is " $i
done


#Step 7: Initialize the Kubernetes cluster on the master node
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


#sleep 3m # Waits 3 minutes.

sleep 30s

sudo kubeadm init --pod-network-cidr=10.10.0.0/16
sleep 10s # Waits 10 second

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


#Step 8: Configure kubectl and Calico
#++++++++++++++++++++++++++++++++++++++++

cd /root/k8-offline/calico
cd /root/k8-offline/calico


#Choice 1: (Install Calico through Operator)
#===========================================

kubectl create -f tigera-operator.yaml

sed -i 's/cidr: 192\.168\.0\.0\/16/cidr: 10.10.0.0\/16/g' custom-resources.yaml
sleep 5s 

kubectl create -f custom-resources.yaml
sleep 2m 


#Installing GPU Operator
#++++++++++++++++++++++++++++++++++++++++

cd /root/k8-offline/gpu-operator
cd /root/k8-offline/gpu-operator

kubectl taint node testk8 node-role.kubernetes.io/control-plane:NoSchedule-

sleep 5s

helm install --wait gpu-operator \
     -n gpu-operator --create-namespace \
     gpu-operator-v24.3.0.tgz \
     -f values.yaml


#Installing Utilities
#++++++++++++++++++++

cd /root/k8-offline/utils
dpkg -i etcd-client_3.3.25+dfsg-7ubuntu0.22.04.1_amd64.deb











